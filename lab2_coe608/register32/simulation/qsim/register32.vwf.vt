// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/27/2023 23:12:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    register32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register32_vlg_sample_tst(
	clk,
	clr,
	d,
	ld,
	sampler_tx
);
input  clk;
input  clr;
input [31:0] d;
input  ld;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or d or ld)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module register32_vlg_check_tst (
	Q,
	sampler_rx
);
input [31:0] Q;
input sampler_rx;

reg [31:0] Q_expected;

reg [31:0] Q_prev;

reg [31:0] Q_expected_prev;

reg [31:0] last_Q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q_prev = Q;
end

// update expected /o prevs

always @(trigger)
begin
	Q_expected_prev = Q_expected;
end


// expected Q[ 31 ]
initial
begin
	Q_expected[31] = 1'b0;
end 
// expected Q[ 30 ]
initial
begin
	Q_expected[30] = 1'b0;
end 
// expected Q[ 29 ]
initial
begin
	Q_expected[29] = 1'b0;
end 
// expected Q[ 28 ]
initial
begin
	Q_expected[28] = 1'b0;
end 
// expected Q[ 27 ]
initial
begin
	Q_expected[27] = 1'b0;
end 
// expected Q[ 26 ]
initial
begin
	Q_expected[26] = 1'b0;
end 
// expected Q[ 25 ]
initial
begin
	Q_expected[25] = 1'b0;
end 
// expected Q[ 24 ]
initial
begin
	Q_expected[24] = 1'b0;
end 
// expected Q[ 23 ]
initial
begin
	Q_expected[23] = 1'b0;
end 
// expected Q[ 22 ]
initial
begin
	Q_expected[22] = 1'b0;
end 
// expected Q[ 21 ]
initial
begin
	Q_expected[21] = 1'b0;
end 
// expected Q[ 20 ]
initial
begin
	Q_expected[20] = 1'b0;
end 
// expected Q[ 19 ]
initial
begin
	Q_expected[19] = 1'b0;
end 
// expected Q[ 18 ]
initial
begin
	Q_expected[18] = 1'b0;
end 
// expected Q[ 17 ]
initial
begin
	Q_expected[17] = 1'b0;
end 
// expected Q[ 16 ]
initial
begin
	Q_expected[16] = 1'b0;
end 
// expected Q[ 15 ]
initial
begin
	Q_expected[15] = 1'b0;
end 
// expected Q[ 14 ]
initial
begin
	Q_expected[14] = 1'b0;
end 
// expected Q[ 13 ]
initial
begin
	Q_expected[13] = 1'b0;
end 
// expected Q[ 12 ]
initial
begin
	Q_expected[12] = 1'b0;
end 
// expected Q[ 11 ]
initial
begin
	Q_expected[11] = 1'b0;
end 
// expected Q[ 10 ]
initial
begin
	Q_expected[10] = 1'b0;
end 
// expected Q[ 9 ]
initial
begin
	Q_expected[9] = 1'b0;
end 
// expected Q[ 8 ]
initial
begin
	Q_expected[8] = 1'b0;
end 
// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'b0;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'b0;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'b0;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'b0;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'b0;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'b0;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'b0;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'b0;
end 
// generate trigger
always @(Q_expected or Q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q = %b | ",Q_expected_prev);
	$display("| real Q = %b | ",Q_prev);
`endif
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end
	if (
		( Q_expected_prev[8] !== 1'bx ) && ( Q_prev[8] !== Q_expected_prev[8] )
		&& ((Q_expected_prev[8] !== last_Q_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[8] = Q_expected_prev[8];
	end
	if (
		( Q_expected_prev[9] !== 1'bx ) && ( Q_prev[9] !== Q_expected_prev[9] )
		&& ((Q_expected_prev[9] !== last_Q_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[9] = Q_expected_prev[9];
	end
	if (
		( Q_expected_prev[10] !== 1'bx ) && ( Q_prev[10] !== Q_expected_prev[10] )
		&& ((Q_expected_prev[10] !== last_Q_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[10] = Q_expected_prev[10];
	end
	if (
		( Q_expected_prev[11] !== 1'bx ) && ( Q_prev[11] !== Q_expected_prev[11] )
		&& ((Q_expected_prev[11] !== last_Q_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[11] = Q_expected_prev[11];
	end
	if (
		( Q_expected_prev[12] !== 1'bx ) && ( Q_prev[12] !== Q_expected_prev[12] )
		&& ((Q_expected_prev[12] !== last_Q_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[12] = Q_expected_prev[12];
	end
	if (
		( Q_expected_prev[13] !== 1'bx ) && ( Q_prev[13] !== Q_expected_prev[13] )
		&& ((Q_expected_prev[13] !== last_Q_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[13] = Q_expected_prev[13];
	end
	if (
		( Q_expected_prev[14] !== 1'bx ) && ( Q_prev[14] !== Q_expected_prev[14] )
		&& ((Q_expected_prev[14] !== last_Q_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[14] = Q_expected_prev[14];
	end
	if (
		( Q_expected_prev[15] !== 1'bx ) && ( Q_prev[15] !== Q_expected_prev[15] )
		&& ((Q_expected_prev[15] !== last_Q_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[15] = Q_expected_prev[15];
	end
	if (
		( Q_expected_prev[16] !== 1'bx ) && ( Q_prev[16] !== Q_expected_prev[16] )
		&& ((Q_expected_prev[16] !== last_Q_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[16] = Q_expected_prev[16];
	end
	if (
		( Q_expected_prev[17] !== 1'bx ) && ( Q_prev[17] !== Q_expected_prev[17] )
		&& ((Q_expected_prev[17] !== last_Q_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[17] = Q_expected_prev[17];
	end
	if (
		( Q_expected_prev[18] !== 1'bx ) && ( Q_prev[18] !== Q_expected_prev[18] )
		&& ((Q_expected_prev[18] !== last_Q_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[18] = Q_expected_prev[18];
	end
	if (
		( Q_expected_prev[19] !== 1'bx ) && ( Q_prev[19] !== Q_expected_prev[19] )
		&& ((Q_expected_prev[19] !== last_Q_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[19] = Q_expected_prev[19];
	end
	if (
		( Q_expected_prev[20] !== 1'bx ) && ( Q_prev[20] !== Q_expected_prev[20] )
		&& ((Q_expected_prev[20] !== last_Q_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[20] = Q_expected_prev[20];
	end
	if (
		( Q_expected_prev[21] !== 1'bx ) && ( Q_prev[21] !== Q_expected_prev[21] )
		&& ((Q_expected_prev[21] !== last_Q_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[21] = Q_expected_prev[21];
	end
	if (
		( Q_expected_prev[22] !== 1'bx ) && ( Q_prev[22] !== Q_expected_prev[22] )
		&& ((Q_expected_prev[22] !== last_Q_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[22] = Q_expected_prev[22];
	end
	if (
		( Q_expected_prev[23] !== 1'bx ) && ( Q_prev[23] !== Q_expected_prev[23] )
		&& ((Q_expected_prev[23] !== last_Q_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[23] = Q_expected_prev[23];
	end
	if (
		( Q_expected_prev[24] !== 1'bx ) && ( Q_prev[24] !== Q_expected_prev[24] )
		&& ((Q_expected_prev[24] !== last_Q_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[24] = Q_expected_prev[24];
	end
	if (
		( Q_expected_prev[25] !== 1'bx ) && ( Q_prev[25] !== Q_expected_prev[25] )
		&& ((Q_expected_prev[25] !== last_Q_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[25] = Q_expected_prev[25];
	end
	if (
		( Q_expected_prev[26] !== 1'bx ) && ( Q_prev[26] !== Q_expected_prev[26] )
		&& ((Q_expected_prev[26] !== last_Q_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[26] = Q_expected_prev[26];
	end
	if (
		( Q_expected_prev[27] !== 1'bx ) && ( Q_prev[27] !== Q_expected_prev[27] )
		&& ((Q_expected_prev[27] !== last_Q_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[27] = Q_expected_prev[27];
	end
	if (
		( Q_expected_prev[28] !== 1'bx ) && ( Q_prev[28] !== Q_expected_prev[28] )
		&& ((Q_expected_prev[28] !== last_Q_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[28] = Q_expected_prev[28];
	end
	if (
		( Q_expected_prev[29] !== 1'bx ) && ( Q_prev[29] !== Q_expected_prev[29] )
		&& ((Q_expected_prev[29] !== last_Q_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[29] = Q_expected_prev[29];
	end
	if (
		( Q_expected_prev[30] !== 1'bx ) && ( Q_prev[30] !== Q_expected_prev[30] )
		&& ((Q_expected_prev[30] !== last_Q_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[30] = Q_expected_prev[30];
	end
	if (
		( Q_expected_prev[31] !== 1'bx ) && ( Q_prev[31] !== Q_expected_prev[31] )
		&& ((Q_expected_prev[31] !== last_Q_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[31] = Q_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#400000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module register32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [31:0] d;
reg ld;
// wires                                               
wire [31:0] Q;

wire sampler;                             

// assign statements (if any)                          
register32 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.d(d),
	.ld(ld),
	.Q(Q)
);
// d[ 31 ]
initial
begin
	d[31] = 1'b0;
	d[31] = #300000 1'b1;
end 
// d[ 30 ]
initial
begin
	d[30] = 1'b0;
	d[30] = #200000 1'b1;
end 
// d[ 29 ]
initial
begin
	d[29] = 1'b0;
	d[29] = #100000 1'b1;
	d[29] = #100000 1'b0;
end 
// d[ 28 ]
initial
begin
	d[28] = 1'b0;
	d[28] = #100000 1'b1;
	d[28] = #100000 1'b0;
end 
// d[ 27 ]
initial
begin
	d[27] = 1'b0;
	d[27] = #300000 1'b1;
end 
// d[ 26 ]
initial
begin
	d[26] = 1'b1;
	d[26] = #100000 1'b0;
end 
// d[ 25 ]
initial
begin
	d[25] = 1'b0;
	d[25] = #200000 1'b1;
	d[25] = #100000 1'b0;
end 
// d[ 24 ]
initial
begin
	d[24] = 1'b0;
	d[24] = #100000 1'b1;
	d[24] = #100000 1'b0;
end 
// d[ 23 ]
initial
begin
	d[23] = 1'b1;
	d[23] = #300000 1'b0;
end 
// d[ 22 ]
initial
begin
	d[22] = 1'b1;
end 
// d[ 21 ]
initial
begin
	d[21] = 1'b1;
	d[21] = #100000 1'b0;
	d[21] = #200000 1'b1;
end 
// d[ 20 ]
initial
begin
	d[20] = 1'b1;
end 
// d[ 19 ]
initial
begin
	d[19] = 1'b1;
	d[19] = #100000 1'b0;
end 
// d[ 18 ]
initial
begin
	d[18] = 1'b0;
	d[18] = #100000 1'b1;
	d[18] = #200000 1'b0;
end 
// d[ 17 ]
initial
begin
	d[17] = 1'b1;
	d[17] = #100000 1'b0;
	d[17] = #100000 1'b1;
end 
// d[ 16 ]
initial
begin
	d[16] = 1'b1;
	d[16] = #200000 1'b0;
	d[16] = #100000 1'b1;
end 
// d[ 15 ]
initial
begin
	d[15] = 1'b0;
	d[15] = #100000 1'b1;
	d[15] = #100000 1'b0;
end 
// d[ 14 ]
initial
begin
	d[14] = 1'b0;
	d[14] = #100000 1'b1;
end 
// d[ 13 ]
initial
begin
	d[13] = 1'b1;
	d[13] = #200000 1'b0;
	d[13] = #100000 1'b1;
end 
// d[ 12 ]
initial
begin
	d[12] = 1'b1;
	d[12] = #100000 1'b0;
	d[12] = #100000 1'b1;
	d[12] = #100000 1'b0;
end 
// d[ 11 ]
initial
begin
	d[11] = 1'b1;
	d[11] = #100000 1'b0;
	d[11] = #100000 1'b1;
end 
// d[ 10 ]
initial
begin
	d[10] = 1'b1;
	d[10] = #100000 1'b0;
	d[10] = #100000 1'b1;
	d[10] = #100000 1'b0;
end 
// d[ 9 ]
initial
begin
	d[9] = 1'b1;
	d[9] = #100000 1'b0;
	d[9] = #200000 1'b1;
end 
// d[ 8 ]
initial
begin
	d[8] = 1'b1;
	d[8] = #100000 1'b0;
	d[8] = #200000 1'b1;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b1;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b0;
	d[6] = #100000 1'b1;
	d[6] = #100000 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
	d[5] = #200000 1'b1;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
	d[4] = #100000 1'b1;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
	d[3] = #100000 1'b1;
	d[3] = #100000 1'b0;
	d[3] = #100000 1'b1;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
	d[2] = #100000 1'b1;
	d[2] = #100000 1'b0;
	d[2] = #100000 1'b1;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b1;
	d[1] = #200000 1'b0;
	d[1] = #100000 1'b1;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b1;
	d[0] = #100000 1'b0;
	d[0] = #100000 1'b1;
	d[0] = #100000 1'b0;
end 

// ld
initial
begin
	ld = 1'b0;
	ld = #60000 1'b1;
	ld = #20000 1'b0;
	ld = #150000 1'b1;
	ld = #10000 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #120000 1'b1;
	clr = #10000 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
end 

register32_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.d(d),
	.ld(ld),
	.sampler_tx(sampler)
);

register32_vlg_check_tst tb_out(
	.Q(Q),
	.sampler_rx(sampler)
);
endmodule

